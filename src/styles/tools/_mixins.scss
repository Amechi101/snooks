/**
 * Sets a media query for the specified breakpoint
 *
 * Accepts:
 * - $media-query: {String} Breakpoint variable (list found in variables.scss)
 *
 * Usage:
 * .selector {
 *   @include media-query($medium-up) {
 *     color: red;
 *   }
 * }
 */
@mixin media-query($media-query) {
  $breakpoint-found: false;

  @each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $declaration: nth($breakpoint, 2);

    @if $media-query == $name and $declaration {
      $breakpoint-found: true;

      @media only screen and #{$declaration} {
        @content;
      }
    }
  }
}

/**
 * Outputs list of transition properties
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
@mixin transition($transitions...) {
  $output: ();

  @each $transition in $transitions {
    $output: append($output, get-transition-properties($transition), comma);
  }
  transition: $output;
}

/**
 * Forces an element to self-clear its children
 *
 * Usage:
 * .selector {
 *   @include clearfix;
 * }
 */
@mixin clearfix() {
  &::after {
    content: '';
    display: table;
    clear: both;
  }

  // stylelint-disable-next-line
  *zoom: 1;
}

/**
 * Hide element but make it accessible to screen readers
 *
 * Usage:
 * .selector {
 *   @include visually-hidden;
 * }
 */
@mixin visually-hidden() {
  // stylelint-disable-next-line
  position: absolute !important;
  overflow: hidden;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  clip: rect(0 0 0 0);
}

/**
 * Reverse the properties applied by @mixin visually-hidden
 *
 * Accepts:
 * - $position: {String} Positioning method for element
 *
 * Usage:
 * .selector {
 *   @include visually-shown(relative);
 * }
 */
@mixin visually-shown($position: inherit) {
  // stylelint-disable-next-line
  position: $position !important;
  overflow: auto;
  width: auto;
  height: auto;
  margin: 0;
  clip: auto;
}

@mixin underline($color) {
  &:after {
    content: "";
    position: absolute;
    background-color: $color;
    bottom: 0;
    height: 1px;
    left: 0;
    width: 0;
    @include transition(width $transition-duration $transition-timing,
        background-color $transition-duration $transition-timing
        );
    }

    &:hover:after {
        width: 100%;
    }
}

@mixin resize-notif($size) {
    height: $size;
    line-height: $size - 2;
    min-width: $size;
    border-radius: $size / 2;
}

@mixin gridItemStyles($numberOfItemsPerRow: 1) {
  $maxItemsPerRow: 5;
  $border_style: 1px solid $color_lightGrey;

  border-bottom: $border_style;
  width: calc(100% / #{$numberOfItemsPerRow});


  @for $i from 2 through $maxItemsPerRow {
    $selectors: '';
    @for $j from 1 through $i {
      &:nth-child(#{$i}n + #{$j})  {
        border-right: 0;
      }
    }
  }

  @for $k from 1 through $numberOfItemsPerRow {
    &:nth-child(#{$numberOfItemsPerRow}n + #{$k})  {
      border-right: $border_style;
    }
  }
}
